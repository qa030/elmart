{"name": "test_sel", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=109.0.5414.120)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x00C26643]\n\t(No symbol) [0x00BBBE21]\n\t(No symbol) [0x00ABDA9D]\n\t(No symbol) [0x00A9EF6A]\n\t(No symbol) [0x00B13AAB]\n\t(No symbol) [0x00B261B6]\n\t(No symbol) [0x00B0FB76]\n\t(No symbol) [0x00AE49C1]\n\t(No symbol) [0x00AE5E5D]\n\tGetHandleVerifier [0x00E9A142+2497106]\n\tGetHandleVerifier [0x00EC85D3+2686691]\n\tGetHandleVerifier [0x00ECBB9C+2700460]\n\tGetHandleVerifier [0x00CD3B10+635936]\n\t(No symbol) [0x00BC4A1F]\n\t(No symbol) [0x00BCA418]\n\t(No symbol) [0x00BCA505]\n\t(No symbol) [0x00BD508B]\n\tBaseThreadInitThunk [0x76E9347D+18]\n\tRtlInitializeExceptionChain [0x77829852+99]\n\tRtlInitializeExceptionChain [0x77829825+54]", "trace": "set_up = None, set_group = None\n\n    @allure.description(\"Test sel\")\n    def test_sel(set_up, set_group):\n        options = Options()\n        options.add_experimental_option('excludeSwitches', ['enable-logging'])\n        driver = webdriver.Chrome(options=options, service=ChromeService(ChromeDriverManager().install()))\n    \n    \n        print(\"Start Test sel\")\n    \n        login = Login_page(driver)\n>       login.authorization()\n\ntests\\test_buy_product.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\login_pages.py:72: in authorization\n    self.driver.maximize_window()\nc:\\python 3.8\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:499: in maximize_window\n    self.execute(command, None)\nc:\\python 3.8\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000000004231B50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...x76E9347D+18]\\\\n\\\\tRtlInitializeExceptionChain [0x77829852+99]\\\\n\\\\tRtlInitializeExceptionChain [0x77829825+54]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=109.0.5414.120)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x00C26643]\nE       \t(No symbol) [0x00BBBE21]\nE       \t(No symbol) [0x00ABDA9D]\nE       \t(No symbol) [0x00A9EF6A]\nE       \t(No symbol) [0x00B13AAB]\nE       \t(No symbol) [0x00B261B6]\nE       \t(No symbol) [0x00B0FB76]\nE       \t(No symbol) [0x00AE49C1]\nE       \t(No symbol) [0x00AE5E5D]\nE       \tGetHandleVerifier [0x00E9A142+2497106]\nE       \tGetHandleVerifier [0x00EC85D3+2686691]\nE       \tGetHandleVerifier [0x00ECBB9C+2700460]\nE       \tGetHandleVerifier [0x00CD3B10+635936]\nE       \t(No symbol) [0x00BC4A1F]\nE       \t(No symbol) [0x00BCA418]\nE       \t(No symbol) [0x00BCA505]\nE       \t(No symbol) [0x00BD508B]\nE       \tBaseThreadInitThunk [0x76E9347D+18]\nE       \tRtlInitializeExceptionChain [0x77829852+99]\nE       \tRtlInitializeExceptionChain [0x77829825+54]\n\nc:\\python 3.8\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "description": "Test sel", "steps": [{"name": "Authorization", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=109.0.5414.120)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x00C26643]\n\t(No symbol) [0x00BBBE21]\n\t(No symbol) [0x00ABDA9D]\n\t(No symbol) [0x00A9EF6A]\n\t(No symbol) [0x00B13AAB]\n\t(No symbol) [0x00B261B6]\n\t(No symbol) [0x00B0FB76]\n\t(No symbol) [0x00AE49C1]\n\t(No symbol) [0x00AE5E5D]\n\tGetHandleVerifier [0x00E9A142+2497106]\n\tGetHandleVerifier [0x00EC85D3+2686691]\n\tGetHandleVerifier [0x00ECBB9C+2700460]\n\tGetHandleVerifier [0x00CD3B10+635936]\n\t(No symbol) [0x00BC4A1F]\n\t(No symbol) [0x00BCA418]\n\t(No symbol) [0x00BCA505]\n\t(No symbol) [0x00BD508B]\n\tBaseThreadInitThunk [0x76E9347D+18]\n\tRtlInitializeExceptionChain [0x77829852+99]\n\tRtlInitializeExceptionChain [0x77829825+54]\n\n", "trace": "  File \"C:\\Users\\Серёга\\PycharmProjects\\elmart\\pages\\login_pages.py\", line 72, in authorization\n    self.driver.maximize_window()\n  File \"c:\\python 3.8\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 499, in maximize_window\n    self.execute(command, None)\n  File \"c:\\python 3.8\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"c:\\python 3.8\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1721827865343, "stop": 1721827881655}], "attachments": [{"name": "stdout", "source": "08b7ef3d-ee68-4a15-830f-1ceccf5176f7-attachment.txt", "type": "text/plain"}], "start": 1721827854763, "stop": 1721827881657, "uuid": "87f544db-904e-4af4-b8cb-ff4eeacd91c1", "historyId": "fc65fad6a7e04aa1d1fe30a6fe71076a", "testCaseId": "fc65fad6a7e04aa1d1fe30a6fe71076a", "fullName": "tests.test_buy_product#test_sel", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_buy_product"}, {"name": "host", "value": "Serega"}, {"name": "thread", "value": "5664-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_buy_product"}]}